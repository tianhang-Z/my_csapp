                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	# xorq %rax,%rax		# count = 0;
0x032: 709801000000000000   | 	jmp Test1
                            | 
0x03b:                      | Loop:              # len不够k  普通循环
0x03b: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...   
0x045: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x04f: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x059: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x063: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x06d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x06f: 718200000000000000   | 	jle RET1		# if so, goto Npos:
0x078: c0f00100000000000000 | 	iaddq $1,%rax
0x082:                      | RET1:
0x082: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x084: 763b00000000000000   | 	jg Loop			# if so, goto Loop:
0x08d: 90                   | 	ret
                            | 
                            | #循环展开
0x08e:                      | Loop1:	
0x08e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src... 
0x098: 50970800000000000000 | 	mrmovq 8(%rdi),%r9  
0x0a2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0ac: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0b6: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b8: 71cb00000000000000   | 	jle Loop2		# if so, goto Npos:
0x0c1: c0f00100000000000000 | 	iaddq $1,%rax
0x0cb:                      | Loop2:	
0x0cb: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0cd: 71e000000000000000   | 	jle Loop3		# if so, goto Npos:
0x0d6: c0f00100000000000000 | 	iaddq $1,%rax
0x0e0:                      | Loop3:	
0x0e0: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...   
0x0ea: 50971800000000000000 | 	mrmovq 24(%rdi),%r9  
0x0f4: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0fe: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x108: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x10a: 711d01000000000000   | 	jle Loop4		# if so, goto Npos:
0x113: c0f00100000000000000 | 	iaddq $1,%rax
0x11d:                      | Loop4:	
0x11d: 6299                 | 	andq %r9, %r9		# val <= 0?
0x11f: 713201000000000000   | 	jle Loop5		# if so, goto Npos:
0x128: c0f00100000000000000 | 	iaddq $1,%rax
0x132:                      | Loop5:	
0x132: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...  
0x13c: 50972800000000000000 | 	mrmovq 40(%rdi),%r9   
0x146: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x150: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x15a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x15c: 716f01000000000000   | 	jle Loop6		# if so, goto Npos:
0x165: c0f00100000000000000 | 	iaddq $1,%rax
0x16f:                      | Loop6:
0x16f: c0f73000000000000000 | 	iaddq $48,%rdi
0x179: c0f63000000000000000 | 	iaddq $48,%rsi
0x183: 6299                 | 	andq %r9, %r9		# val <= 0?
0x185: 719801000000000000   | 	jle Test1		# if so, goto Npos:
0x18e: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x198:                      | Test1:                       #循环展开的判断		
0x198: c0f2faffffffffffffff | 	iaddq $-6,%rdx
0x1a2: 758e00000000000000   | 	jge Loop1   # len>=k  k路循环展开
0x1ab: c0f20600000000000000 | 	iaddq $6,%rdx
0x1b5: 763b00000000000000   | 	jg Loop 
0x1be: 711602000000000000   | 	jle Done
                            | 
                            | 
0x1c7:                      | BS1:       #二分 len<k
0x1c7: 2029                 | 	rrmovq %rdx,%r9
0x1c9: c0f9fdffffffffffffff | 	iaddq $-3,%r9           #len-3
0x1d3: 72e501000000000000   | 	jl Left                   #len<3 ?
0x1dc: 751602000000000000   | 	jge Right					#len>=3 ?
                            |  
0x1e5:                      | Left:       
0x1e5: 2029                 | 	rrmovq %rdx,%r9  
0x1e7: c0f20300000000000000 | 	iaddq $3,%rdx       
0x1f1: c0f2ffffffffffffffff | 	iaddq $-1, %rdx      #len-1 
0x1fb: 721602000000000000   | 	jl Done               #len==0
0x204: 736f01000000000000   | 	je Loop6            	#len==1
0x20d: 763201000000000000   | 	jg Loop5				# len==2 ?
                            | 
                            | 
0x216:                      | Right:
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x216:                      | Done:
0x216: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x217:                      | End:
                            | #/* $end ncopy-ys */
0x217:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x218:                      | 	.align 8
0x218:                      | src:
0x218: ffffffffffffffff     | 	.quad -1
0x220: 0200000000000000     | 	.quad 2
0x228: fdffffffffffffff     | 	.quad -3
0x230: 0400000000000000     | 	.quad 4
0x238: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x240:                      | 	.align 16
0x240:                      | Predest:
0x240: fadebc0000000000     | 	.quad 0xbcdefa
0x248:                      | dest:
0x248: abefcd0000000000     | 	.quad 0xcdefab
0x250: abefcd0000000000     | 	.quad 0xcdefab
0x258: abefcd0000000000     | 	.quad 0xcdefab
0x260: abefcd0000000000     | 	.quad 0xcdefab
0x268:                      | Postdest:
0x268: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x270:                      | .align 8
                            | # Run time stack
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
                            | 
0x2f0:                      | Stack:
