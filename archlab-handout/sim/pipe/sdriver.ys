#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	# xorq %rax,%rax		# count = 0;
	jmp Test1

Loop:              # len不够k  普通循环
	mrmovq 8(%rdi), %r10	# read val from src...   
	iaddq $8, %rdi		# src++
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
	iaddq $8, %rsi		# dst++
	iaddq $-1,%rdx
	andq %r10, %r10		# val <= 0?
	jle RET1		# if so, goto Npos:
	iaddq $1,%rax
RET1:
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
	ret

#循环展开
Loop1:	
	mrmovq (%rdi), %r10	# read val from src... 
	mrmovq 8(%rdi),%r9  
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Loop2		# if so, goto Npos:
	iaddq $1,%rax
Loop2:	
	andq %r9, %r9		# val <= 0?
	jle Loop3		# if so, goto Npos:
	iaddq $1,%rax
Loop3:	
	mrmovq 16(%rdi), %r10	# read val from src...   
	mrmovq 24(%rdi),%r9  
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r9, 24(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Loop4		# if so, goto Npos:
	iaddq $1,%rax
Loop4:	
	andq %r9, %r9		# val <= 0?
	jle Loop5		# if so, goto Npos:
	iaddq $1,%rax
Loop5:	
	mrmovq 32(%rdi), %r10	# read val from src...  
	mrmovq 40(%rdi),%r9   
	rmmovq %r10, 32(%rsi)	# ...and store it to dst
	rmmovq %r9, 40(%rsi)
	andq %r10, %r10		# val <= 0?
	jle Loop6		# if so, goto Npos:
	iaddq $1,%rax
Loop6:
	iaddq $48,%rdi
	iaddq $48,%rsi
	andq %r9, %r9		# val <= 0?
	jle Test1		# if so, goto Npos:
	iaddq $1,%rax

Test1:                       #循环展开的判断		
	iaddq $-6,%rdx
	jge Loop1   # len>=k  k路循环展开
	iaddq $6,%rdx
	jg Loop 
	jle Done


BS1:       #二分 len<k
	rrmovq %rdx,%r9
	iaddq $-3,%r9           #len-3
	jl Left                   #len<3 ?
	jge Right					#len>=3 ?
 
Left:       
	rrmovq %rdx,%r9  
	iaddq $3,%rdx       
	iaddq $-1, %rdx      #len-1 
	jl Done               #len==0
	je Loop6            	#len==1
	jg Loop5				# len==2 ?


Right:


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
